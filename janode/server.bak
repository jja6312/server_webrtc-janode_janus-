// Janode 애플리케이션 - 메인 서버 파일
const express = require('express');
const http = require('http');
const path = require('path');
const cors = require('cors');
const { Janus } = require('janode');
const dotenv = require('dotenv');

// 환경 변수 로드
dotenv.config();

// Express 앱 설정
const app = express();
app.use(cors());
app.use(express.json());
app.use(express.static(path.join(__dirname, 'public')));

// 서버 생성
const server = http.createServer(app);
const PORT = process.env.PORT || 3000;

// MySQL 연결 설정
const mysql = require('mysql2');
const pool = mysql.createPool({
  host: process.env.DB_HOST,
  user: process.env.DB_USER,
  password: process.env.DB_PASSWORD,
  database: process.env.DB_NAME || 'threetier_app',
  waitForConnections: true,
  connectionLimit: 10,
  queueLimit: 0
});

// Janus 서버 연결 설정
const janusConfig = {
  address: 'ws://localhost:8188',
  options: {
    keepalive: true,
    keepaliveInterval: 30000,
    reconnect: true,
    maxReconnectAttempts: 10,
    reconnectDelay: 1000
  }
};

// 메시지 API 엔드포인트
app.get('/api/messages', (req, res) => {
  pool.query('SELECT * FROM web_app_message ORDER BY created_at DESC', (err, results) => {
    if (err) {
      console.error('데이터베이스 쿼리 오류:', err);
      return res.status(500).json({ status: 'error', message: '데이터베이스 오류' });
    }
    res.json({ status: 'success', messages: results });
  });
});

// 미디어 스트림 정보 API
app.get('/api/streams', (req, res) => {
  res.json({
    status: 'success',
    streams: [
      { id: 1, name: '스트림 1', type: 'video', status: 'active' },
      { id: 2, name: '스트림 2', type: 'audio', status: 'inactive' }
    ]
  });
});

// Janus 연결 상태 API
app.get('/api/status', (req, res) => {
  res.json({
    status: 'success',
    janus: {
      connected: true,
      uptime: Math.floor(Math.random() * 3600),
      sessions: Math.floor(Math.random() * 10)
    },
    server: {
      type: 'media_server',
      instance: 2
    }
  });
});

// 서버 시작
server.listen(PORT, '0.0.0.0', () => {
  console.log(`미디어 서버가 포트 ${PORT}에서 실행 중입니다.`);
  console.log(`서버 정보: 인스턴스 2 (미디어 서버)`);
});

// Janus 연결 함수 (실제 연결은 하지 않음 - 데모용)
async function connectToJanus() {
  try {
    console.log('Janus 서버에 연결 시도 중...');
    // 실제 구현에서는 Janus.connect(janusConfig) 호출
    console.log('Janus 서버에 연결되었습니다.');
  } catch (error) {
    console.error('Janus 서버 연결 오류:', error);
  }
}

// 애플리케이션 시작 시 Janus 연결 시도
connectToJanus();
